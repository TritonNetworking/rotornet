
%% Script to plot Figure 7

% ------------------------------------------------------------------------%
% Copyright 2017 Regents of the University of California

% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:

% 1. Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.

% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.

% 3. Neither the name of the copyright holder nor the names of its
%    contributors may be used to endorse or promote products derived
%    from this software without specific prior written permission.

% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
% HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
% LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
% ------------------------------------------------------------------------%


rerunsims=0;
% 1 - rerun the simulations to generate data, then plot
% 0 - load previously saved data, then plot


%% load measurements:

path=[pwd '\Measurements\'];

data_RR=csvread([path 'output_RR.csv']);
data_VLB=csvread([path 'output_VLB.csv']);

data_RR(data_RR==-1)=nan;
data_VLB(data_VLB==-1)=nan;

[~,nreal_rr]=size(data_RR);
avg_RR=sum(data_RR,2)/nreal_rr;

[n,~]=size(data_VLB);

% averages, maximums, minimums
[measavg,measmax,measmin]=deal(zeros(1,n));
for a=1:n
    temp=data_VLB(a,:);
    temp=temp(isnan(temp)==0);
    measavg(a)=mean(temp);
    measmax(a)=max(temp);
    measmin(a)=min(temp);
end;

%% model:

path=[pwd '\Model\'];

% Run RotorNet simulation function
if rerunsims==1
    cd Model
    Main_RotorLB_testbed();
    cd ..
end;

% NOTE: this .mat file is generated by running the function: [pwd '\Model\Main_RotorLB_testbed.m']
load([path 'RotorLB_testbed_32real.mat']);

% averages, maximums, minimums
[modelavg,modelmax,modelmin]=deal(zeros(1,n));
for a=1:n
    modelavg(a)=mean(sum(BWr_2hop(a,:),2)/sum(BWr_1hop(a,:),2));
    modelmax(a)=max(BWr_2hop(a,:))/BWr_1hop(a,1);
    modelmin(a)=min(BWr_2hop(a,:))/BWr_1hop(a,1);
end;

%% plot:

figure;
hold on;
hp=patch([(1:n)/n fliplr((1:n))/n],[modelmax fliplr(modelmin)],'b');
hp.FaceColor=.5*[1 1 1];
hp.FaceAlpha=.5;
h1=plot((1:n)/n,measavg./avg_RR.','-ro','linewidth',2);
for a=1:n
    plot(a/n*[1 1],[measmax(a) measmin(a)]/avg_RR(a),'-r','linewidth',2);
    plot(a/n*[1 1]+[-.01 .01],measmax(a)*[1 1]/avg_RR(a),'-r','linewidth',2);
    plot(a/n*[1 1]+[-.01 .01],measmin(a)*[1 1]/avg_RR(a),'-r','linewidth',2);
end;

% model average
h2=plot(Nflows0/Nflows0(end),modelavg,'-','color',1*[0 0 0],'linewidth',2);

hrr=plot([0 1],[1 1],'--k','linewidth',2);

hleg=legend([h1 h2 hp hrr],'Measurement','Model (average)','Model (spread)','One-hop forwarding');
hleg.Location='northeast';
% hleg.FontSize=12;

ylim([0 7.1]);
xlim([0 1]);

xlabel('Traffic density');
h=ylabel('Normalized agg. throughput');
ax=gca;
ax.FontSize=20;

ax.YTick=(0:7);
ax.YTickLabel={'','1','','3','','5','','7'};

grid on;
box on;

ax.XColor=[0 0 0];
ax.YColor=[0 0 0];
ax.GridColor=[0 0 0];
ax.MinorGridColor=[0 0 0];
ax.GridAlpha=.2;

outerpos = ax.OuterPosition;
ti = ax.TightInset; 
left = outerpos(1) + ti(1);
bottom = outerpos(2) + ti(2);
ax_width = outerpos(3) - ti(1) - ti(3);
ax_height = outerpos(4) - ti(2) - ti(4);
ax.Position = [left bottom ax_width ax_height];

fig = gcf;
fig.PaperPositionMode = 'auto';
fig_pos = fig.PaperPosition;
fig.PaperSize = [fig_pos(3) fig_pos(4)];

h.Position=[-.0575 3.3 -1];




