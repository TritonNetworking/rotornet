
%% Script to plot Figure 8b and 8c

% ------------------------------------------------------------------------%
% Copyright 2017 Regents of the University of California

% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:

% 1. Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.

% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.

% 3. Neither the name of the copyright holder nor the names of its
%    contributors may be used to endorse or promote products derived
%    from this software without specific prior written permission.

% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
% HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
% LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
% ------------------------------------------------------------------------%


rerunsims=0;
% 1 - rerun the simulations to generate data, then plot
% 0 - load previously saved data, then plot


%% load LP results for packet switch

filename1='LP_PsBW_N256_93.mat';

load(filename1);
NN=34;
PBWav=sum(BWp,2)/Nreal;
[NNp,~]=size(PBWav);
PBWav=[PBWav;(N-1)*ones(NN-NNp,1)];

%% run/load Matlab simulation of RotorLB

filename2='RotorLB_N=256_31.mat';

path=[pwd '\RotorNet_model\'];

if rerunsims==1
    cd RotorNet_model
    workers=8; % number of parallel workers, set equal to number of logical processors
    Main_RotorLB_256(workers); % warning: this function takes a long time to run, set workers to >= 31
    cd ..
end;

% NOTE: this .mat file is generated by running the function: [pwd '\RotorNet_model\Main_RotorLB_256.m']
load([path filename2]);

RBWav4=sum(BWr(:,:,Ncycles),2)/Nreal;

%% plot 1

F=16; % fontsize
LW=2; % linewidth

figure;
hold on;

% --- RotorLB, synthetic traffic
hrlb=plot(Nflows0/Nflows0(end),RBWav4./PBWav,'-','color',.7*[0 1 1],'linewidth',LW,'marker','^','markersize',7);

% --- Datacenter traffic:
Ncycles=4;
path=[pwd '\DC_traffic\'];

% 1. Microsoft
load([path 'RotorLB_N=256_MS.mat']);
load([path 'LP_PsBW_N256_MS.mat']);
relTP=BWserved(:,Ncycles).'./PsBW;

hms=plot(sum(density)/5, ...
    sum(relTP)/5,'*','linewidth',LW,'color',[1 .6 0],'markersize',10);
plot(sum(density)/5*[1 1],[min(relTP) max(relTP)],'linewidth',LW,'color',[1 .6 0],'markersize',10);
plot(sum(density)/5*[1 1]+.02*[-1 1],max(relTP)*[1 1],'linewidth',LW,'color',[1 .6 0],'markersize',10);
plot(sum(density)/5*[1 1]+.02*[-1 1],min(relTP)*[1 1],'linewidth',LW,'color',[1 .6 0],'markersize',10);

% 2. Facebook
% front end
load([path 'RotorLB_N=256_FBfrontend.mat']);
load([path 'LP_PsBW_N256_FBfrontend.mat']);
hfront=plot(density,BWserved(Ncycles)/PsBW,'d','linewidth',LW,'color',[1 .6 0],'markersize',10);

% hadoop
load([path 'RotorLB_N=256_FBhadoop.mat']);
load([path 'LP_PsBW_N256_FBhadoop.mat']);
hhadoop=plot(density,BWserved(Ncycles)/PsBW,'o','linewidth',LW,'color',[1 .6 0],'markersize',10);

% --- One-hop forwarding
h1hop=plot([1/(N^2-N) 1],[1/N (N-1)/N],'--k','linewidth',LW);

% --- 3:1 Fat Tree
h31=plot([0 1],1/3*[1 1],':m','linewidth',LW);

% --- matching fill factor
hff=plot([0 1],[(N-1)/N (N-1)/N],'--r','linewidth',LW);

hleg=legend([hff hrlb hms hfront hhadoop h1hop h31], ...
    'Matching fill factor', ...
    'Synthetic traffic','Microsoft traffic','Facebook: front-end', ...
    'Facebook: Hadoop','One-hop forwarding','Ideal 3:1 Fat Tree');
hleg.Location='southeast';
hleg.FontSize=16;

ax=gca;
ax.YTick=(0:.1:1);
ax.YTickLabel={'0','','0.2','','0.4','','0.6','','0.8','','1'};

grid on;
box on;
xlim([0 1]);
ylim([0 1]);
set(gca,'fontsize',F);
xlabel('Traffic density');
ylabel('Relative aggregate throughput');

ax.XColor=[0 0 0];
ax.YColor=[0 0 0];
ax.GridColor=[0 0 0];
ax.MinorGridColor=[0 0 0];
ax.GridAlpha=.2;

outerpos = ax.OuterPosition;
ti = ax.TightInset; 
left = outerpos(1) + ti(1);
bottom = outerpos(2) + ti(2);
ax_width = outerpos(3) - ti(1) - ti(3);
ax_height = outerpos(4) - ti(2) - ti(4);
ax.Position = [left bottom ax_width ax_height];

fig = gcf;
fig.PaperPositionMode = 'auto';
fig_pos = fig.PaperPosition;
fig.PaperSize = [fig_pos(3) fig_pos(4)];


%% plot 2 - zoomed in

figure;
hold on;

% --- matching fill factor
hff=plot([0 1],[(N-1)/N (N-1)/N],'--r','linewidth',LW);

% --- RotorLB, synthetic traffic
hrlb=plot(Nflows0/Nflows0(end),RBWav4./PBWav,'-','color',.7*[0 1 1],'linewidth',LW,'marker','^','markersize',7);

% --- Datacenter traffic:
Ncycles=4;
path=[pwd '\DC_traffic\'];

% 1. Microsoft
load([path 'RotorLB_N=256_MS.mat']);
load([path 'LP_PsBW_N256_MS.mat']);
relTP=BWserved(:,Ncycles).'./PsBW;

hms=plot(sum(density)/5, ...
    sum(relTP)/5,'*','linewidth',LW,'color',[1 .6 0],'markersize',10);
plot(sum(density)/5*[1 1],[min(relTP) max(relTP)],'linewidth',LW,'color',[1 .6 0],'markersize',10);
plot(sum(density)/5*[1 1]+.002*[-1 1],max(relTP)*[1 1],'linewidth',LW,'color',[1 .6 0],'markersize',10);
plot(sum(density)/5*[1 1]+.002*[-1 1],min(relTP)*[1 1],'linewidth',LW,'color',[1 .6 0],'markersize',10);

% --- One-hop forwarding
h1hop=plot([1/(N^2-N) 1],[1/N (N-1)/N],'--k','linewidth',LW);

% --- 3:1 Fat Tree
h31=plot([0 1],1/3*[1 1],':m','linewidth',LW);


ax=gca;
ax.YTick=(0:.1:1);
ax.YTickLabel={'0','','','','','0.5','','','','','1'}.';
ax.XTick=[0 .025 .05];

grid on;
box on;
xlim([0 .05]);
ylim([0 1]);
set(gca,'fontsize',F);
xlabel('Traffic density');

set(gcf,'position',[680 678 235 420]);

ax.XColor=[0 0 0];
ax.YColor=[0 0 0];
ax.GridColor=[0 0 0];
ax.MinorGridColor=[0 0 0];
ax.GridAlpha=.2;

outerpos = ax.OuterPosition;
ti = ax.TightInset; 
left = outerpos(1) + ti(1);
bottom = outerpos(2) + ti(2);
ax_width = outerpos(3) - ti(1) - ti(3);
ax_height = outerpos(4) - ti(2) - ti(4);
ax.Position = [left bottom ax_width ax_height];
ax.Position = [left-0 bottom ax_width ax_height];

fig = gcf;
fig.PaperPositionMode = 'auto';
fig_pos = fig.PaperPosition;
fig.PaperSize = [fig_pos(3) fig_pos(4)];



