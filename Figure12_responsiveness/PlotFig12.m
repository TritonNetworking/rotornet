
%% Script to plot Figure 12

% ------------------------------------------------------------------------%
% Copyright 2017 Regents of the University of California

% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:

% 1. Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.

% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.

% 3. Neither the name of the copyright holder nor the names of its
%    contributors may be used to endorse or promote products derived
%    from this software without specific prior written permission.

% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
% HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
% LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
% ------------------------------------------------------------------------%


rerunsims=0;
% 1 - rerun the simulations to generate data, then plot
% 0 - load previously saved data, then plot


%% Run RotorNet simulation and load data


filename='RotorLB_N=256_response_1.mat';

path=[pwd '\RotorNet_model\'];

if rerunsims==1
    cd RotorNet_model
    Main_RotorLB_256();
    cd ..
end;

% NOTE: this .mat file is generated by running the function: [pwd '\RotorNet_model\Main_RotorLB_256.m']
load([path filename]);


%% load LP data for packet switch

load([path 'LP_PsBW_N=256_response.mat']);
BWpext=[];
for a=1:NN
    BWpext=[BWpext repmat(BWp(a),[1 Ncycles])];
end;

%% plot:

F=15; % fontsize
LW=2; % linewidth

BWrcat=[];
for a=1:NN
    BWrcat=[BWrcat BWr(a,:)];
end;

figure;
hold on;
plot(BWpext/N,'--ok','linewidth',LW,'markersize',8);
plot(BWrcat/N,'--^k','color',.7*[0 1 1],'linewidth',LW,'markersize',8);
plot(BWpext/N/3,'--xm','linewidth',LW,'markersize',8);
grid on;
box on;
xlim([0 NN*Ncycles]);
ylim([0 1]);
set(gca,'fontsize',F);
xlabel('Time (matching cycle)');
ylabel('Aggregate throughput');
hleg=legend('Ideal 1:1 FT','RotorLB','Ideal 3:1 FT');
hleg.Position=[0.2693 0.1855 0.2426 0.1711];


ax = gca;

ax.XColor=[0 0 0];
ax.YColor=[0 0 0];
ax.GridColor=[0 0 0];
ax.MinorGridColor=[0 0 0];
ax.GridAlpha=.2;

outerpos = ax.OuterPosition;
ti = ax.TightInset; 
left = outerpos(1) + ti(1);
bottom = outerpos(2) + ti(2);
ax_width = outerpos(3) - ti(1) - ti(3);
ax_height = outerpos(4) - ti(2) - ti(4);
ax.Position = [left bottom ax_width ax_height];

fig = gcf;
fig.PaperPositionMode = 'auto';
fig_pos = fig.PaperPosition;
fig.PaperSize = [fig_pos(3) fig_pos(4)];


%%



